"""
Django settings for click32 project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import mimetypes
from datetime import datetime
import os




# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-hb5jxlm&rk4^i8@#-ozu)i+33wm993_9=heooz1_y5l4!pv&+q'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'True') == 'True'

if DEBUG:
    ALLOWED_HOSTS = ['*']
    CSRF_TRUSTED_ORIGINS = ['http://localhost:8000']
else:
    ALLOWED_HOSTS = ['meusite.com']
    CSRF_TRUSTED_ORIGINS = ['https://meusite.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'vitrine.click32_admin',
    'vitrine.apps.VitrineConfig',
    
    
]

#CACHES = {
#    'default': {
#        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
#        'LOCATION': '/tmp/django_cache',  # pasta onde os arquivos serão gerados
#    }
#}

SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True

if DEBUG:
    CSRF_TRUSTED_ORIGINS = [
        'http://localhost:8000',
        'http://127.0.0.1:8000', 
        'https://localhost:8000',
        'https://127.0.0.1:8000',
        'https://*.ngrok-free.app',  
        'http://*.ngrok-free.app' 
    ]
else:
    CSRF_TRUSTED_ORIGINS = ['https://seusite.com']
    
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',  # Necessário para sessões
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Necessário para autenticação
    'django.contrib.messages.middleware.MessageMiddleware',  # Necessário para mensagens
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'vitrine.middleware.ClickTrackingMiddleware',  # Middleware de rastreamento de cliques
    'vitrine.middleware.HeartbeatLogFilter',
]


mimetypes.add_type("application/manifest+json", ".json")



ROOT_URLCONF = 'click32.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'click32.wsgi.application'

# media
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database: usa Postgres quando as env vars estão presentes; senão, fallback para SQLite (dev)
POSTGRES_DB = os.getenv("POSTGRES_DB")
POSTGRES_USER = os.getenv("POSTGRES_USER")
POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD")
POSTGRES_HOST = os.getenv("POSTGRES_HOST")
POSTGRES_PORT = os.getenv("POSTGRES_PORT", "5432")

if POSTGRES_HOST and POSTGRES_DB:
    # Config para usar PostgreSQL (padrão para containers / produção)
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": POSTGRES_DB or "click32_db",
            "USER": POSTGRES_USER or "click32_user",
            "PASSWORD": POSTGRES_PASSWORD or "click32_pass",
            "HOST": POSTGRES_HOST or "db",
            "PORT": POSTGRES_PORT,
            # Mantém conexões abertas por N segundos (evita overhead em containers)
            "CONN_MAX_AGE": int(os.getenv("DB_CONN_MAX_AGE", "60")),
            # Faz cada request ser atômico (wrap em transaction) — opcional, pode desativar em cargas maiores
            "ATOMIC_REQUESTS": os.getenv("DB_ATOMIC_REQUESTS", "True") == "True",
        }
    }
else:
    # Fallback para SQLite no desenvolvimento local (não requer configurar Postgres)
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

CORS_ALLOW_ALL_ORIGINS = True  # Para desenvolvimento apenas!

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True
# login
LOGIN_URL = '/admin/login/'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

STATIC_ROOT = BASE_DIR / 'staticfiles'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'




# pasta de logs
LOG_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOG_DIR, exist_ok=True)

# nome do arquivo com data
today = datetime.now().strftime('%Y-%m-%d')
log_filename = os.path.join(LOG_DIR, f'click32-{today}.log')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'heartbeat_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: not (
                hasattr(record, 'request') and 
                hasattr(record.request, 'path') and 
                '/heartbeat/' in record.request.path and
                record.status_code == 200
            )
        },
        'console_heartbeat_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: not (
                'POST /heartbeat/' in record.getMessage() and 
                '200' in record.getMessage()
            )
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'filters': ['console_heartbeat_filter'],  # Filtra heartbeats no console
        },
        'file': {
            'class': 'logging.FileHandler',
            'formatter': 'verbose',
            'filename': log_filename,
            'encoding': 'utf-8',
            # Não filtra no arquivo para manter registro completo
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'stores': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.db.backends': {
            'level': 'WARNING',
            'handlers': ['file'],
            'propagate': False,
        },
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
        },
        'django.server': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
            'filters': ['console_heartbeat_filter'],  # Filtra específico do servidor
        },
        'django.request': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
            'filters': ['console_heartbeat_filter'],  # Filtra específico de requests
        },
    },
}